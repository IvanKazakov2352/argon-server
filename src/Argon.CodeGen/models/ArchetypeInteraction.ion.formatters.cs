//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;
[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_ChannelEntitlementOverwrite_Formatter : IonFormatter<ChannelEntitlementOverwrite>
{
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public ChannelEntitlementOverwrite Read(CborReader reader)
    {
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");;
        var __channelid = IonFormatterStorage<guid>.Read(reader);
        var __archetypeid = IonFormatterStorage<guid>.ReadNullable(reader);
        var __servermemberid = IonFormatterStorage<guid>.ReadNullable(reader);
        var __allow = IonFormatterStorage<ArgonEntitlement>.Read(reader);
        var __deny = IonFormatterStorage<ArgonEntitlement>.Read(reader);
        var __creatorid = IonFormatterStorage<guid>.Read(reader);
        var __id = IonFormatterStorage<guid>.Read(reader);
        reader.ReadEndArrayAndSkip(arraySize - 7);
        return new(__channelid, __archetypeid, __servermemberid, __allow, __deny, __creatorid, __id);
    }
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public void Write(CborWriter writer, ChannelEntitlementOverwrite value)
    {
        writer.WriteStartArray(7);
        IonFormatterStorage<guid>.Write(writer, value.channelId);
        IonFormatterStorage<guid>.WriteNullable(writer, value.archetypeId);
        IonFormatterStorage<guid>.WriteNullable(writer, value.serverMemberId);
        IonFormatterStorage<ArgonEntitlement>.Write(writer, value.allow);
        IonFormatterStorage<ArgonEntitlement>.Write(writer, value.deny);
        IonFormatterStorage<guid>.Write(writer, value.creatorId);
        IonFormatterStorage<guid>.Write(writer, value.id);
        writer.WriteEndArray();
    }
}

[GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
public sealed class Ion_Archetype_Formatter : IonFormatter<Archetype>
{
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public Archetype Read(CborReader reader)
    {
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");;
        var __id = IonFormatterStorage<guid>.Read(reader);
        var __spaceid = IonFormatterStorage<guid>.Read(reader);
        var __name = IonFormatterStorage<string>.Read(reader);
        var __description = IonFormatterStorage<string>.Read(reader);
        var __ismentionable = IonFormatterStorage<bool>.Read(reader);
        var __colour = IonFormatterStorage<i4>.Read(reader);
        var __ishidden = IonFormatterStorage<bool>.Read(reader);
        var __islocked = IonFormatterStorage<bool>.Read(reader);
        var __isgroup = IonFormatterStorage<bool>.Read(reader);
        var __isdefault = IonFormatterStorage<bool>.Read(reader);
        var __iconfileid = IonFormatterStorage<string>.ReadNullable(reader);
        var __entitlement = IonFormatterStorage<ArgonEntitlement>.Read(reader);
        reader.ReadEndArrayAndSkip(arraySize - 12);
        return new(__id, __spaceid, __name, __description, __ismentionable, __colour, __ishidden, __islocked, __isgroup, __isdefault, __iconfileid, __entitlement);
    }
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public void Write(CborWriter writer, Archetype value)
    {
        writer.WriteStartArray(12);
        IonFormatterStorage<guid>.Write(writer, value.id);
        IonFormatterStorage<guid>.Write(writer, value.spaceId);
        IonFormatterStorage<string>.Write(writer, value.name);
        IonFormatterStorage<string>.Write(writer, value.description);
        IonFormatterStorage<bool>.Write(writer, value.isMentionable);
        IonFormatterStorage<i4>.Write(writer, value.colour);
        IonFormatterStorage<bool>.Write(writer, value.isHidden);
        IonFormatterStorage<bool>.Write(writer, value.isLocked);
        IonFormatterStorage<bool>.Write(writer, value.isGroup);
        IonFormatterStorage<bool>.Write(writer, value.isDefault);
        IonFormatterStorage<string>.WriteNullable(writer, value.iconFileId);
        IonFormatterStorage<ArgonEntitlement>.Write(writer, value.entitlement);
        writer.WriteEndArray();
    }
}

