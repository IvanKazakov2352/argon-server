//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a code generation tool.
//     Changes to this file may cause incorrect behavior and will be lost
//     if the code is regenerated.
//
//     Generator: IonPath Codegen
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable
#nullable enable


namespace ArgonContracts;

public sealed class Ion_UserInteraction_ServiceExecutor(AsyncServiceScope scope) : IServiceExecutorRouter
{
    
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetMe_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetMe();
        
        IonFormatterStorage<ArgonUser>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task CreateSpace_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __request = IonFormatterStorage<CreateServerRequest>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.CreateSpace(__request);
        
        IonFormatterStorage<ArgonSpaceBase>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetSpaces_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetSpaces();
        
        IonFormatterStorage<ArgonSpaceBase>.WriteArray(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task UpdateMe_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __request = IonFormatterStorage<UserEditInput>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.UpdateMe(__request);
        
        IonFormatterStorage<ArgonUser>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Authorize_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __data = IonFormatterStorage<UserCredentialsInput>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.Authorize(__data);
        
        IonFormatterStorage<IAuthorizeResult>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task Registration_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __data = IonFormatterStorage<NewUserCredentialsInput>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.Registration(__data);
        
        IonFormatterStorage<IRegistrationResult>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task BeginResetPassword_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __email = IonFormatterStorage<string>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.BeginResetPassword(__email);
        
        IonFormatterStorage<bool>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task ResetPassword_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 3;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __email = IonFormatterStorage<string>.Read(reader);
        var __otpcode = IonFormatterStorage<string>.Read(reader);
        var __newpassword = IonFormatterStorage<string>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.ResetPassword(__email, __otpcode, __newpassword);
        
        IonFormatterStorage<IAuthorizeResult>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task JoinToSpace_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __invitecode = IonFormatterStorage<InviteCode>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.JoinToSpace(__invitecode);
        
        IonFormatterStorage<IJoinToSpaceResult>.Write(writer, result);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task BroadcastPresence_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 1;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        var __presence = IonFormatterStorage<UserActivityPresence>.Read(reader);
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.BroadcastPresence(__presence);
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task RemoveBroadcastPresence_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        await service.RemoveBroadcastPresence();
    }
    [GeneratedCodeAttribute("ionc", null), CompilerGeneratedAttribute]
    public async Task GetMyFeatures_Execute(CborReader reader, CborWriter writer)
    {
        var service = scope.ServiceProvider.GetRequiredService<IUserInteraction>();
    
        const int argumentSize = 0;
    
        var arraySize = reader.ReadStartArray() ?? throw new Exception("undefined len array not allowed");
    
        
    
        reader.ReadEndArrayAndSkip(arraySize - argumentSize);
    
        var result = await service.GetMyFeatures();
        
        IonFormatterStorage<FeatureFlag>.WriteArray(writer, result);
    }

    
    
    
        public Task RouteExecuteAsync(string methodName, CborReader reader, CborWriter writer)
    {
        
        if (methodName.Equals("GetMe", StringComparison.InvariantCultureIgnoreCase))
            return GetMe_Execute(reader, writer);
        if (methodName.Equals("CreateSpace", StringComparison.InvariantCultureIgnoreCase))
            return CreateSpace_Execute(reader, writer);
        if (methodName.Equals("GetSpaces", StringComparison.InvariantCultureIgnoreCase))
            return GetSpaces_Execute(reader, writer);
        if (methodName.Equals("UpdateMe", StringComparison.InvariantCultureIgnoreCase))
            return UpdateMe_Execute(reader, writer);
        if (methodName.Equals("Authorize", StringComparison.InvariantCultureIgnoreCase))
            return Authorize_Execute(reader, writer);
        if (methodName.Equals("Registration", StringComparison.InvariantCultureIgnoreCase))
            return Registration_Execute(reader, writer);
        if (methodName.Equals("BeginResetPassword", StringComparison.InvariantCultureIgnoreCase))
            return BeginResetPassword_Execute(reader, writer);
        if (methodName.Equals("ResetPassword", StringComparison.InvariantCultureIgnoreCase))
            return ResetPassword_Execute(reader, writer);
        if (methodName.Equals("JoinToSpace", StringComparison.InvariantCultureIgnoreCase))
            return JoinToSpace_Execute(reader, writer);
        if (methodName.Equals("BroadcastPresence", StringComparison.InvariantCultureIgnoreCase))
            return BroadcastPresence_Execute(reader, writer);
        if (methodName.Equals("RemoveBroadcastPresence", StringComparison.InvariantCultureIgnoreCase))
            return RemoveBroadcastPresence_Execute(reader, writer);
        if (methodName.Equals("GetMyFeatures", StringComparison.InvariantCultureIgnoreCase))
            return GetMyFeatures_Execute(reader, writer);

        
        throw new InvalidOperationException("no method defined");
    }
}

