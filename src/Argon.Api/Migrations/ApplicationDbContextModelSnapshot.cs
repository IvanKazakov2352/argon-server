// <auto-generated />
using System;
using Argon.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Argon.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Argon.Entities.ArchetypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Colour")
                        .HasColumnType("integer");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<decimal>("Entitlement")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("IconFileId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsMentionable")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Archetypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-3333-0000-1111-111111111111"),
                            Colour = -8355712,
                            CreatedAt = 1732377674205L,
                            CreatorId = new Guid("11111111-2222-1111-2222-111111111111"),
                            Description = "Default role for everyone in this server",
                            Entitlement = 15761383m,
                            IsDefault = false,
                            IsDeleted = false,
                            IsGroup = false,
                            IsHidden = false,
                            IsLocked = false,
                            IsMentionable = true,
                            Name = "everyone",
                            SpaceId = new Guid("11111111-0000-1111-1111-111111111111"),
                            UpdatedAt = -62135596800000L
                        },
                        new
                        {
                            Id = new Guid("11111111-4444-0000-1111-111111111111"),
                            Colour = -8355712,
                            CreatedAt = 1732377674205L,
                            CreatorId = new Guid("11111111-2222-1111-2222-111111111111"),
                            Description = "Default role for owner in this server",
                            Entitlement = -1m,
                            IsDefault = false,
                            IsDeleted = false,
                            IsGroup = false,
                            IsHidden = true,
                            IsLocked = true,
                            IsMentionable = false,
                            Name = "owner",
                            SpaceId = new Guid("11111111-0000-1111-1111-111111111111"),
                            UpdatedAt = -62135596800000L
                        });
                });

            modelBuilder.Entity("Argon.Entities.ArgonMessageEntity", b =>
                {
                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Entities")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Reply")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("ServerId", "ChannelId", "MessageId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServerId", "ChannelId", "MessageId")
                        .IsUnique();

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Argon.Entities.ChannelEntitlementOverwriteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Allow")
                        .HasColumnType("numeric(20,0)");

                    b.Property<Guid?>("ArchetypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Deny")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Scope")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SpaceCategoryEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpaceMemberId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArchetypeId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceCategoryEntityId");

                    b.HasIndex("SpaceMemberId");

                    b.ToTable("ChannelEntitlementOverwrites");
                });

            modelBuilder.Entity("Argon.Entities.ChannelEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<int>("ChannelType")
                        .HasColumnType("integer");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("DoNotRestrictBoosters")
                        .HasColumnType("boolean");

                    b.Property<string>("FractionalIndex")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<TimeSpan?>("SlowMode")
                        .HasColumnType("interval");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceId");

                    b.HasIndex("Id", "SpaceId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Argon.Entities.ServerInvite", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("Expired")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceId");

                    b.ToTable("ServerInvites");
                });

            modelBuilder.Entity("Argon.Entities.SpaceCategoryEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("FractionalIndex")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SpaceId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Argon.Entities.SpaceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarFileId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("TopBannedFileId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Servers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-0000-1111-1111-111111111111"),
                            AvatarFileId = "",
                            CreatedAt = -62135596800000L,
                            CreatorId = new Guid("11111111-2222-1111-2222-111111111111"),
                            Description = "",
                            IsDeleted = false,
                            Name = "system_server",
                            UpdatedAt = -62135596800000L
                        });
                });

            modelBuilder.Entity("Argon.Entities.SpaceMemberArchetypeEntity", b =>
                {
                    b.Property<Guid>("SpaceMemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArchetypeId")
                        .HasColumnType("uuid");

                    b.HasKey("SpaceMemberId", "ArchetypeId");

                    b.HasIndex("ArchetypeId");

                    b.ToTable("ServerMemberArchetypes");
                });

            modelBuilder.Entity("Argon.Entities.SpaceMemberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("JoinedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ServerId")
                        .HasColumnType("uuid");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ServerId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToServerRelations");
                });

            modelBuilder.Entity("Argon.Entities.UserAgreements", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AgreeTOS")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowedSendOptionalEmails")
                        .HasColumnType("boolean");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAgreements");
                });

            modelBuilder.Entity("Argon.Entities.UserDeviceHistoryEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("MachineId")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("DeviceType")
                        .HasColumnType("integer");

                    b.Property<string>("LastKnownIP")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<long?>("LastLoginTime")
                        .HasColumnType("bigint");

                    b.Property<string>("RegionAddress")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("UserId", "MachineId");

                    b.ToTable("DeviceHistories");
                });

            modelBuilder.Entity("Argon.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarFileId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long?>("LockDownExpiration")
                        .HasColumnType("bigint");

                    b.Property<int>("LockdownReason")
                        .HasColumnType("integer");

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("PasswordDigest")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayName");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedUsername")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-2222-1111-2222-111111111111"),
                            CreatedAt = -62135596800000L,
                            DisplayName = "System",
                            Email = "system@argon.gl",
                            IsDeleted = false,
                            LockdownReason = 0,
                            NormalizedUsername = "system",
                            UpdatedAt = -62135596800000L,
                            Username = "system"
                        });
                });

            modelBuilder.Entity("Argon.Entities.UserProfileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Badges")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("BannerFileId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Bio")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomStatus")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("CustomStatusIconId")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<long?>("DeletedAt")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Argon.Entities.UsernameReservedEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique();

                    b.ToTable("Reservation");
                });

            modelBuilder.Entity("Argon.Entities.ArchetypeEntity", b =>
                {
                    b.HasOne("Argon.Entities.SpaceEntity", "Space")
                        .WithMany("Archetypes")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Argon.Entities.ChannelEntitlementOverwriteEntity", b =>
                {
                    b.HasOne("Argon.Entities.ArchetypeEntity", "Archetype")
                        .WithMany()
                        .HasForeignKey("ArchetypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Argon.Entities.ChannelEntity", "Channel")
                        .WithMany("EntitlementOverwrites")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Argon.Entities.SpaceCategoryEntity", null)
                        .WithMany("EntitlementOverwrites")
                        .HasForeignKey("SpaceCategoryEntityId");

                    b.HasOne("Argon.Entities.SpaceMemberEntity", "SpaceMember")
                        .WithMany()
                        .HasForeignKey("SpaceMemberId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Archetype");

                    b.Navigation("Channel");

                    b.Navigation("SpaceMember");
                });

            modelBuilder.Entity("Argon.Entities.ChannelEntity", b =>
                {
                    b.HasOne("Argon.Entities.SpaceCategoryEntity", "Category")
                        .WithMany("Channels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Argon.Entities.SpaceEntity", "Space")
                        .WithMany("Channels")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Argon.Entities.ServerInvite", b =>
                {
                    b.HasOne("Argon.Entities.SpaceEntity", "Space")
                        .WithMany("ServerInvites")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Argon.Entities.SpaceCategoryEntity", b =>
                {
                    b.HasOne("Argon.Entities.SpaceEntity", "Space")
                        .WithMany("SpaceCategories")
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("Argon.Entities.SpaceMemberArchetypeEntity", b =>
                {
                    b.HasOne("Argon.Entities.ArchetypeEntity", "Archetype")
                        .WithMany("SpaceMemberRoles")
                        .HasForeignKey("ArchetypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Argon.Entities.SpaceMemberEntity", "ServerMember")
                        .WithMany("SpaceMemberArchetypes")
                        .HasForeignKey("SpaceMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Archetype");

                    b.Navigation("ServerMember");
                });

            modelBuilder.Entity("Argon.Entities.SpaceMemberEntity", b =>
                {
                    b.HasOne("Argon.Entities.SpaceEntity", "Space")
                        .WithMany("Users")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Argon.Entities.UserEntity", "User")
                        .WithMany("ServerMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Argon.Entities.UserAgreements", b =>
                {
                    b.HasOne("Argon.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Argon.Entities.UserDeviceHistoryEntity", b =>
                {
                    b.HasOne("Argon.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Argon.Entities.UserProfileEntity", b =>
                {
                    b.HasOne("Argon.Entities.UserEntity", "User")
                        .WithOne("Profile")
                        .HasForeignKey("Argon.Entities.UserProfileEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Argon.Entities.ArchetypeEntity", b =>
                {
                    b.Navigation("SpaceMemberRoles");
                });

            modelBuilder.Entity("Argon.Entities.ChannelEntity", b =>
                {
                    b.Navigation("EntitlementOverwrites");
                });

            modelBuilder.Entity("Argon.Entities.SpaceCategoryEntity", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("EntitlementOverwrites");
                });

            modelBuilder.Entity("Argon.Entities.SpaceEntity", b =>
                {
                    b.Navigation("Archetypes");

                    b.Navigation("Channels");

                    b.Navigation("ServerInvites");

                    b.Navigation("SpaceCategories");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Argon.Entities.SpaceMemberEntity", b =>
                {
                    b.Navigation("SpaceMemberArchetypes");
                });

            modelBuilder.Entity("Argon.Entities.UserEntity", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("ServerMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
