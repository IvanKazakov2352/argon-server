// <auto-generated />
using System;
using Argon.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Argon.Api.Migrations.Clickhouse
{
    [DbContext(typeof(ClickhouseContext))]
    partial class ClickhouseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("Argon.ArgonMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("UUID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("Bool");

                    b.Property<Guid>("ReplyToMessage")
                        .HasColumnType("UUID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("String");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Argon.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("UUID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("FileId")
                        .HasColumnType("String");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("String");

                    b.Property<ulong>("FileSize")
                        .HasColumnType("UInt64");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("Bool");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("UUID");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("String");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Argon.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("UUID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("Bool");

                    b.Property<int>("Length")
                        .HasColumnType("Int32");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("UUID");

                    b.Property<int>("Offset")
                        .HasColumnType("Int32");

                    b.Property<ushort>("Type")
                        .HasColumnType("UInt16");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("UrlMask")
                        .HasColumnType("String");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Entities");
                });

            modelBuilder.Entity("Argon.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("UUID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("FileId")
                        .HasColumnType("String");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("String");

                    b.Property<ulong>("FileSize")
                        .HasColumnType("UInt64");

                    b.Property<int>("Height")
                        .HasColumnType("Int32");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("Bool");

                    b.Property<bool>("IsVideo")
                        .HasColumnType("Bool");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("UUID");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("String");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.Property<int>("Width")
                        .HasColumnType("Int32");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Argon.Sticker", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UUID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DateTime");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("UUID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("DateTime");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("String");

                    b.Property<string>("FileId")
                        .HasColumnType("String");

                    b.Property<bool>("IsAnimated")
                        .HasColumnType("Bool");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("Bool");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("UUID");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DateTime");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Stickers");
                });

            modelBuilder.Entity("Argon.Document", b =>
                {
                    b.HasOne("Argon.ArgonMessage", "ArgonMessage")
                        .WithOne("Document")
                        .HasForeignKey("Argon.Document", "MessageId")
                        .IsRequired();

                    b.Navigation("ArgonMessage");
                });

            modelBuilder.Entity("Argon.Entity", b =>
                {
                    b.HasOne("Argon.ArgonMessage", "ArgonMessage")
                        .WithMany("Entities")
                        .HasForeignKey("MessageId")
                        .IsRequired();

                    b.Navigation("ArgonMessage");
                });

            modelBuilder.Entity("Argon.Image", b =>
                {
                    b.HasOne("Argon.ArgonMessage", "ArgonMessage")
                        .WithMany("Image")
                        .HasForeignKey("MessageId")
                        .IsRequired();

                    b.Navigation("ArgonMessage");
                });

            modelBuilder.Entity("Argon.Sticker", b =>
                {
                    b.HasOne("Argon.ArgonMessage", "ArgonMessage")
                        .WithOne("Sticker")
                        .HasForeignKey("Argon.Sticker", "MessageId")
                        .IsRequired();

                    b.Navigation("ArgonMessage");
                });

            modelBuilder.Entity("Argon.ArgonMessage", b =>
                {
                    b.Navigation("Document");

                    b.Navigation("Entities");

                    b.Navigation("Image");

                    b.Navigation("Sticker");
                });
#pragma warning restore 612, 618
        }
    }
}
